'use strict'

const kmeans = require('node-kmeans')
const { norm, similarity } = require('../utils/calculate')

/**
 * generate a 2D matrix of time series
 * @param {Number} array 
 * @param {Number} len length of time series
 * @param {Number} interval slice interval
 */
function generateTimeSeries({len, interval = 1}, ...array) {
    const matrix = []
    for (let i = 0; i < parseInt((array.length - len)/interval); i ++) {
        const start = i * interval, end = start + len
        matrix.push([...array.slice(start, end), array[end] - array[end - 1]])
    }
    return matrix
}

/**
 * do kmeans
 * @param {Array[Array]} timeseries 
 * @param {Number} groups 
 */
function kmeansClusters(timeseries, groups) {
    return new Promise((resolve, reject) => {
        kmeans.clusterize(timeseries, {k: groups}, (err, res) => {
            if (err) {
                reject(err)
            }
            resolve(res)
        })
    })
}

/**
 * Predict the average price change by poission distribution
 * @param {Array} x price Array 
 * @param {Array[Array]} 2D array generated by kmeans
 */
function predictDpiByPoission(x, s) {
    let num = 0, den = 0
    const len = x.length
    for (let i = 0; i < s.length; i ++) {
        const exp = Math.exp(-0.25 * norm(x, s[i]))
        num += s[i][len] * exp
        den += exp
    }
    return num/den
}
/**
 *  这种慢多了
function predictDpiByPoission(x, s) {
    const start = process.hrtime.bigint()
    let num = 0, den = 0
    const len = x.length
    for (let i = 0; i < s.length; i ++) {
        const y_i = math.subset(s, math.index(i, x.length))
        const x_i = math.subset(s, math.index(i, [...Array(len).keys()]))[0]
        const exp = Math.exp(-0.25 * norm(x, x_i))
        num += y_i * exp
        den += exp
    }
    console.log(process.hrtime.bigint() - start);
    return num/den
}
 */

 /**
  * Predict the average price change by similarity
  * @param {Array} x 
  * @param {Array[Array]} s 
  * @param {Number} c 
  */
function predictDpiBySimilarity(x, s, c = -1) {
    let num = 0, den = 0
    const len = x.length
    for (let i = 0; i < s.length; i ++) {
        const si = similarity(x, s[i])
        console.log(si, s[i]);
        const exp = Math.exp(c * similarity(x, s[i]))
        num += s[i][len] * exp
        den += exp
    }
    return num/den
}

module.exports = { generateTimeSeries, kmeansClusters, predictDpiByPoission, predictDpiBySimilarity }